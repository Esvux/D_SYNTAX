/* ParserGramatica.java */
/* Generated By:JavaCC: Do not edit this line. ParserGramatica.java */
package com.esvux.CompiladorGramatica;

import com.esvux.AST.*;
import java.util.ArrayList;
import java.util.Iterator;

public class ParserGramatica implements ParserGramaticaConstants {

  Gramatica gramatica;

  public static void main(String args[]) throws ParseException {
    ParserGramatica parser = new ParserGramatica(new java.io.StringReader(
            "Terminal a,b as int; "
          + "noterminal S,E,T,F as Int; "
          + "Raiz = S; "
          + "RegistrarPrecedencia(20,Asociatividad.der,F);"
    ));
    parser.gramatica = new Gramatica();
    parser.GRAMATICA();
    System.out.println("Exito!!");
  }

  final public void GRAMATICA() throws ParseException {
    label_1:
    while (true) {
      DEFINICIONES();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 6:
      case 13:
      case 14:
      case 20:
      case ID:{
        ;
        break;
        }
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
    }
    jj_consume_token(0);
  }

  final public void DEFINICIONES() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case 6:{
      TERMS();
      jj_consume_token(5);
      break;
      }
    case 13:{
      NOTERMS();
      jj_consume_token(5);
      break;
      }
    case 14:{
      REGS();
      jj_consume_token(5);
      break;
      }
    case 20:{
      RAIZ();
      jj_consume_token(5);
      break;
      }
    case ID:{
      REGLA();
      jj_consume_token(5);
      break;
      }
    default:
      jj_la1[1] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void TERMS() throws ParseException {ArrayList<String> lista;
    Token tipo=new Token();
    jj_consume_token(6);
    lista = L_ID();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case 7:{
      jj_consume_token(7);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 8:{
        tipo = jj_consume_token(8);
        break;
        }
      case 9:{
        tipo = jj_consume_token(9);
        break;
        }
      case 10:{
        tipo = jj_consume_token(10);
        break;
        }
      case 11:{
        tipo = jj_consume_token(11);
        break;
        }
      case 12:{
        tipo = jj_consume_token(12);
        break;
        }
      default:
        jj_la1[2] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
      }
    default:
      jj_la1[3] = jj_gen;
      ;
    }
Iterator<String> it = lista.iterator();
      while(it.hasNext()){
        ElementoGramatical temp = new ElementoGramatical(it.next());
        temp.setTipo(tipo.image);
        this.gramatica.agregarTerminal(temp);
      }
  }

  final public void NOTERMS() throws ParseException {ArrayList<String> lista;
    Token tipo=new Token();
    jj_consume_token(13);
    lista = L_ID();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case 7:{
      jj_consume_token(7);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 8:{
        tipo = jj_consume_token(8);
        break;
        }
      case 9:{
        tipo = jj_consume_token(9);
        break;
        }
      case 10:{
        tipo = jj_consume_token(10);
        break;
        }
      case 11:{
        tipo = jj_consume_token(11);
        break;
        }
      case 12:{
        tipo = jj_consume_token(12);
        break;
        }
      default:
        jj_la1[4] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
      }
    default:
      jj_la1[5] = jj_gen;
      ;
    }
Iterator<String> it = lista.iterator();
      while(it.hasNext()){
        ElementoGramatical temp = new ElementoGramatical(it.next());
        temp.setTipo(tipo.image);
        this.gramatica.agregarNoTerminal(temp);
      }
  }

//Producción para registrar la precedencia de los terminales dentro de la gramática.
  final public void REGS() throws ParseException {ArrayList<String> lista;
    Token prec, asoc = new Token();
    jj_consume_token(14);
    jj_consume_token(15);
    prec = jj_consume_token(INT);
    jj_consume_token(16);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case 17:
    case 18:{
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 17:{
        asoc = jj_consume_token(17);
        break;
        }
      case 18:{
        asoc = jj_consume_token(18);
        break;
        }
      default:
        jj_la1[6] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(16);
      break;
      }
    default:
      jj_la1[7] = jj_gen;
      ;
    }
    lista = L_ID();
    jj_consume_token(19);
this.gramatica.registrarPrecedencia(lista, Integer.parseInt(prec.image), asoc.image);
  }

  final public ArrayList<String> L_ID() throws ParseException {ArrayList<String> lista = new ArrayList<String>();
    Token elem1; Token elem2;
    elem1 = jj_consume_token(ID);
lista.add(elem1.image);
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 16:{
        ;
        break;
        }
      default:
        jj_la1[8] = jj_gen;
        break label_2;
      }
      jj_consume_token(16);
      elem2 = jj_consume_token(ID);
lista.add(elem2.image);
    }
{if ("" != null) return lista;}
    throw new Error("Missing return statement in function");
  }

  final public void RAIZ() throws ParseException {Token raiz = new Token();
    jj_consume_token(20);
    jj_consume_token(21);
    raiz = jj_consume_token(ID);
this.gramatica.setRaiz(raiz.image);
  }

  final public void REGLA() throws ParseException {
    jj_consume_token(ID);
    jj_consume_token(22);
    jj_consume_token(21);
    PROD();
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 23:{
        ;
        break;
        }
      default:
        jj_la1[9] = jj_gen;
        break label_3;
      }
      jj_consume_token(23);
      PROD();
    }
  }

  final public void PROD() throws ParseException {
    jj_consume_token(ID);
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 24:{
        ;
        break;
        }
      default:
        jj_la1[10] = jj_gen;
        break label_4;
      }
      jj_consume_token(24);
      label_5:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case 25:{
          ;
          break;
          }
        default:
          jj_la1[11] = jj_gen;
          break label_5;
        }
        ACCION();
      }
      jj_consume_token(ID);
    }
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 25:{
        ;
        break;
        }
      default:
        jj_la1[12] = jj_gen;
        break label_6;
      }
      ACCION();
    }
  }

  final public void ACCION() throws ParseException {
    jj_consume_token(25);
    jj_consume_token(26);
  }

  /** Generated Token Manager. */
  public ParserGramaticaTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[13];
  static private int[] jj_la1_0;
  static {
      jj_la1_init_0();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x8106040,0x8106040,0x1f00,0x80,0x1f00,0x80,0x60000,0x60000,0x10000,0x800000,0x1000000,0x2000000,0x2000000,};
   }

  /** Constructor with InputStream. */
  public ParserGramatica(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public ParserGramatica(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new ParserGramaticaTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 13; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 13; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public ParserGramatica(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new ParserGramaticaTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 13; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 13; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public ParserGramatica(ParserGramaticaTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 13; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(ParserGramaticaTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 13; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk_f() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[32];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 13; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 32; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

}
